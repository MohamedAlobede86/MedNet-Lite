import torch
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve, confusion_matrix, ConfusionMatrixDisplay

def evaluate_model(model, X, y_true_tensor):
    model.eval()
    with torch.no_grad():
        y_pred_tensor, ca1, sa1, ca2, sa2 = model(X)
        y_pred = torch.sigmoid(y_pred_tensor).cpu().numpy().flatten()
        y_true = y_true_tensor.cpu().numpy().flatten()

    y_pred_binary = (y_pred > 0.4).astype(int)

    acc = accuracy_score(y_true, y_pred_binary)
    prec = precision_score(y_true, y_pred_binary)
    rec = recall_score(y_true, y_pred_binary)
    f1 = f1_score(y_true, y_pred_binary)
    auc_score = roc_auc_score(y_true, y_pred)

    print(f"Accuracy:  {acc:.4f}")
    print(f"Precision: {prec:.4f}")
    print(f"Recall:    {rec:.4f}")
    print(f"F1 Score:  {f1:.4f}")
    print(f"AUC:       {auc_score:.4f}")

    fpr, tpr, _ = roc_curve(y_true, y_pred)
    plt.figure()
    plt.plot(fpr, tpr, label=f"AUC = {auc_score:.2f}")
    plt.plot([0, 1], [0, 1], '--', label="Random")
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.title("ROC Curve")
    plt.legend()
    plt.grid(True)
    plt.show()

    if sa2 is not None and sa2.numel() > 0:
        plt.figure()
        plt.plot(sa2[0].cpu().numpy(), color='red', label='Spatial Attention')
        plt.title("CBAM Spatial Attention Map")
        plt.xlabel("Time Index")
        plt.ylabel("Attention Weight")
        plt.legend()
        plt.grid(True)
        plt.show()

    cm = confusion_matrix(y_true, y_pred_binary)
    TN, FP, FN, TP = cm.ravel()
    print(f"False Positives (FP): {FP}")
    print(f"False Negatives (FN): {FN}")
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot(cmap='Blues')
    plt.title("Confusion Matrix - MedNetLite")
    plt.show()

    return acc, f1, auc_score
