import torch
import torch.nn as nn

class CBAM1D(nn.Module):
    def __init__(self, channels, reduction=16):
        super().__init__()
        self.channel_attention = nn.Sequential(
            nn.AdaptiveAvgPool1d(1),
            nn.Conv1d(channels, channels // reduction, 1),
            nn.ReLU(),
            nn.Conv1d(channels // reduction, channels, 1),
            nn.Sigmoid()
        )
        self.spatial_attention = nn.Sequential(
            nn.Conv1d(2, 1, kernel_size=3, padding=1),
            nn.Sigmoid()
        )

    def forward(self, x):
        ca = self.channel_attention(x)
        x = x * ca
        avg_out = torch.mean(x, dim=1, keepdim=True)
        max_out, _ = torch.max(x, dim=1, keepdim=True)
        sa_input = torch.cat([avg_out, max_out], dim=1)
        sa = self.spatial_attention(sa_input)
        if sa is not None and sa.numel() > 0:
            sa = sa.squeeze(-1) if sa.ndim > 2 else sa
        x = x * sa if sa is not None else x
        return x, ca.squeeze(), sa.squeeze()

class MedNetLite(nn.Module):
    def __init__(self):
        super().__init__()
        self.block1 = nn.Sequential(
            nn.Conv1d(1, 32, 3, padding=1),
            nn.BatchNorm1d(32),
            nn.ReLU()
        )
        self.cbam1 = CBAM1D(32)

        self.block2 = nn.Sequential(
            nn.Conv1d(32, 64, 3, padding=1),
            nn.BatchNorm1d(64),
            nn.ReLU()
        )
        self.cbam2 = CBAM1D(64)

        self.pool = nn.AdaptiveAvgPool1d(1)
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(64, 1)
        )

    def forward(self, x):
        x = self.block1(x)
        x, ca1, sa1 = self.cbam1(x)
        x = self.block2(x)
        x, ca2, sa2 = self.cbam2(x)
        x = self.pool(x)
        out = self.classifier(x)
        return out, ca1, sa1, ca2, sa2
